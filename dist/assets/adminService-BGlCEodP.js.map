{"version":3,"file":"adminService-BGlCEodP.js","sources":["../../src/services/adminService.ts"],"sourcesContent":["import { api } from './api';\n\ninterface AdminStats {\n  totalUsers: number;\n  activeUsers: number;\n  adminUsers: number;\n}\n\ninterface AdminUser {\n  id: string;\n  email: string;\n  full_name: string;\n  role: string;\n  is_active: boolean;\n  created_at: string;\n  last_login_at?: string;\n}\n\ninterface AdminUsersResponse {\n  users: AdminUser[];\n  total: number;\n  page: number;\n  limit: number;\n}\n\ninterface Question {\n  id: string;\n  question_text: string;\n  subject: string;\n  sub_topic?: string;\n  difficulty_level: string;\n  question_type: string;\n  options: string[];\n  correct_answer: string;\n  explanation?: string;\n  time_limit_seconds: number;\n  review_status: string;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface QuestionFormData {\n  question_text: string;\n  subject: string;\n  sub_topic?: string;\n  difficulty_level: string;\n  question_type: string;\n  options: string[];\n  correct_answer: string;\n  explanation?: string;\n  time_limit_seconds: number;\n}\n\ninterface TryoutPackage {\n  id: string;\n  title: string;\n  description?: string;\n  category: string;\n  difficulty_level: string;\n  duration_minutes: number;\n  total_questions: number;\n  price: number;\n  is_active: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface TryoutPackageFormData {\n  title: string;\n  description?: string;\n  category: string;\n  difficulty_level: string;\n  duration_minutes: number;\n  total_questions: number;\n  price: number;\n  is_active: boolean;\n}\n\ninterface QuestionsResponse {\n  questions: Question[];\n  total: number;\n  page: number;\n  limit: number;\n}\n\ninterface TryoutPackagesResponse {\n  packages: TryoutPackage[];\n  total: number;\n  page: number;\n  limit: number;\n}\n\nexport const adminService = {\n  // Get admin dashboard stats\n  getStats: async (): Promise<AdminStats> => {\n    const response = await api.get('/admin/stats');\n    return response.data;\n  },\n\n  // Get all users with filters\n  getUsers: async (params?: {\n    page?: number;\n    limit?: number;\n    role?: string;\n    status?: string;\n  }): Promise<AdminUsersResponse> => {\n    const response = await api.get('/admin/users', { params });\n    return response.data;\n  },\n\n  // Update user role\n  updateUserRole: async (userId: string, role: string): Promise<void> => {\n    await api.patch(`/admin/users/${userId}/role`, { role });\n  },\n\n  // Update user status\n  updateUserStatus: async (userId: string, isActive: boolean): Promise<void> => {\n    await api.patch(`/admin/users/${userId}/status`, { is_active: isActive });\n  },\n\n  // Questions CRUD\n  getQuestions: async (params?: {\n    page?: number;\n    limit?: number;\n    subject?: string;\n    difficulty_level?: string;\n    review_status?: string;\n    search?: string;\n  }): Promise<QuestionsResponse> => {\n    const response = await api.get('/admin/questions', { params });\n    return response.data;\n  },\n\n  createQuestion: async (data: QuestionFormData): Promise<Question> => {\n    const response = await api.post('/admin/questions', data);\n    return response.data;\n  },\n\n  updateQuestion: async (id: string, data: QuestionFormData): Promise<Question> => {\n    const response = await api.put(`/admin/questions/${id}`, data);\n    return response.data;\n  },\n\n  deleteQuestion: async (id: string): Promise<void> => {\n    await api.delete(`/admin/questions/${id}`);\n  },\n\n  // Tryout Packages CRUD\n  getTryoutPackages: async (params?: {\n    page?: number;\n    limit?: number;\n    category?: string;\n    difficulty_level?: string;\n    is_active?: boolean;\n    search?: string;\n  }): Promise<TryoutPackagesResponse> => {\n    const response = await api.get('/admin/tryout-packages', { params });\n    return response.data;\n  },\n\n  createTryoutPackage: async (data: TryoutPackageFormData): Promise<TryoutPackage> => {\n    const response = await api.post('/admin/tryout-packages', data);\n    return response.data;\n  },\n\n  updateTryoutPackage: async (id: string, data: TryoutPackageFormData): Promise<TryoutPackage> => {\n    const response = await api.put(`/admin/tryout-packages/${id}`, data);\n    return response.data;\n  },\n\n  deleteTryoutPackage: async (id: string): Promise<void> => {\n    await api.delete(`/admin/tryout-packages/${id}`);\n  },\n};\n\nexport type { Question, QuestionFormData, TryoutPackage, TryoutPackageFormData };"],"names":["adminService","getStats","async","api","get","data","getUsers","params","updateUserRole","userId","role","patch","updateUserStatus","isActive","is_active","getQuestions","createQuestion","post","updateQuestion","id","put","deleteQuestion","delete","getTryoutPackages","createTryoutPackage","updateTryoutPackage","deleteTryoutPackage"],"mappings":"wCA4FO,MAAMA,EAAe,CAE1BC,SAAUC,gBACeC,EAAIC,IAAI,iBACfC,KAIlBC,SAAUJ,MAAOK,UAMQJ,EAAIC,IAAI,eAAgB,CAAEG,YACjCF,KAIlBG,eAAgBN,MAAOO,EAAgBC,WAC/BP,EAAIQ,MAAM,gBAAgBF,SAAe,CAAEC,UAInDE,iBAAkBV,MAAOO,EAAgBI,WACjCV,EAAIQ,MAAM,gBAAgBF,WAAiB,CAAEK,UAAWD,KAIhEE,aAAcb,MAAOK,UAQIJ,EAAIC,IAAI,mBAAoB,CAAEG,YACrCF,KAGlBW,eAAgBd,MAAOG,UACEF,EAAIc,KAAK,mBAAoBZ,IACpCA,KAGlBa,eAAgBhB,MAAOiB,EAAYd,WACVF,EAAIiB,IAAI,oBAAoBD,IAAMd,IACzCA,KAGlBgB,eAAgBnB,MAAOiB,UACfhB,EAAImB,OAAO,oBAAoBH,MAIvCI,kBAAmBrB,MAAOK,UAQDJ,EAAIC,IAAI,yBAA0B,CAAEG,YAC3CF,KAGlBmB,oBAAqBtB,MAAOG,UACHF,EAAIc,KAAK,yBAA0BZ,IAC1CA,KAGlBoB,oBAAqBvB,MAAOiB,EAAYd,WACfF,EAAIiB,IAAI,0BAA0BD,IAAMd,IAC/CA,KAGlBqB,oBAAqBxB,MAAOiB,UACpBhB,EAAImB,OAAO,0BAA0BH"}