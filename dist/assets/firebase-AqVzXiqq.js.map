{"version":3,"file":"firebase-AqVzXiqq.js","sources":["../../src/lib/firebase.ts"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { \n  getAuth, \n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signOut,\n  GoogleAuthProvider,\n  signInWithPopup,\n  sendPasswordResetEmail,\n  updateProfile,\n  onAuthStateChanged,\n  User,\n  UserCredential\n} from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\n// Hapus baris ini karena sudah menggunakan Supabase storage\n// import { getStorage } from \"firebase/storage\";\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY || \"AIzaSyBbvXQQoSG33cyMsdHYwgjSFKd2cZ8NpEI\",\n  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN || \"snbtku-project.firebaseapp.com\",\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID || \"snbtku-project\",\n  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET || \"snbtku-project.firebasestorage.app\",\n  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID || \"283605769123\",\n  appId: import.meta.env.VITE_FIREBASE_APP_ID || \"1:283605769123:web:1e553f5e3c8cc3ffb71816\",\n  measurementId: import.meta.env.VITE_FIREBASE_MEASUREMENT_ID || \"G-0WSKY4PLZ9\"\n};\n\n// Validate required environment variables in production\nif (import.meta.env.PROD) {\n  const requiredEnvVars = [\n    'VITE_FIREBASE_API_KEY',\n    'VITE_FIREBASE_AUTH_DOMAIN',\n    'VITE_FIREBASE_PROJECT_ID'\n  ];\n  \n  const missingVars = requiredEnvVars.filter(varName => !import.meta.env[varName]);\n  if (missingVars.length > 0) {\n    throw new Error(`Missing required environment variables: ${missingVars.join(', ')}`);\n  }\n}\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\n// Hapus baris ini\n// export const storage = getStorage(app);\n\n// Google provider\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\n\n// Authentication functions\n\n/**\n * Mendaftarkan pengguna baru dengan email dan password\n * @param email - Email pengguna\n * @param password - Password pengguna\n * @param displayName - Nama yang akan ditampilkan\n * @returns Promise yang menyelesaikan UserCredential\n */\nexport const registerWithEmailAndPassword = async (\n  email: string, \n  password: string, \n  displayName: string\n): Promise<UserCredential> => {\n  try {\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    // Update profile dengan displayName\n    if (userCredential.user) {\n      await updateProfile(userCredential.user, { displayName });\n    }\n    return userCredential;\n  } catch (error) {\n    console.error(\"Error registering with email and password:\", error);\n    throw error;\n  }\n};\n\n/**\n * Login dengan email dan password\n * @param email - Email pengguna\n * @param password - Password pengguna\n * @returns Promise yang menyelesaikan UserCredential\n */\nexport const loginWithEmailAndPassword = async (\n  email: string, \n  password: string\n): Promise<UserCredential> => {\n  try {\n    return await signInWithEmailAndPassword(auth, email, password);\n  } catch (error) {\n    console.error(\"Error logging in with email and password:\", error);\n    throw error;\n  }\n};\n\n/**\n * Login dengan Google\n * @returns Promise yang menyelesaikan UserCredential\n */\nexport const signInWithGoogle = async (): Promise<UserCredential> => {\n  try {\n    return await signInWithPopup(auth, googleProvider);\n  } catch (error) {\n    console.error(\"Error signing in with Google:\", error);\n    throw error;\n  }\n};\n\n/**\n * Logout pengguna saat ini\n * @returns Promise yang menyelesaikan void\n */\nexport const logoutUser = async (): Promise<void> => {\n  try {\n    await signOut(auth);\n  } catch (error) {\n    console.error(\"Error signing out:\", error);\n    throw error;\n  }\n};\n\n/**\n * Mengirim email reset password\n * @param email - Email pengguna\n * @returns Promise yang menyelesaikan void\n */\nexport const resetPassword = async (email: string): Promise<void> => {\n  try {\n    await sendPasswordResetEmail(auth, email);\n  } catch (error) {\n    console.error(\"Error sending password reset email:\", error);\n    throw error;\n  }\n};\n\n/**\n * Mendapatkan pengguna saat ini\n * @returns User saat ini atau null jika tidak ada pengguna yang login\n */\nexport const getCurrentUser = (): User | null => {\n  return auth.currentUser;\n};\n\n/**\n * Mendaftarkan callback untuk perubahan status autentikasi\n * @param callback - Fungsi yang akan dipanggil ketika status autentikasi berubah\n * @returns Fungsi untuk unsubscribe dari listener\n */\nexport const onAuthStateChange = (callback: (user: User | null) => void) => {\n  return onAuthStateChanged(auth, callback);\n};\n\nexport default app;"],"names":["missingVars","filter","varName","__vite_import_meta_env__","length","Error","join","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","getAuth","getFirestore","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","async","signInWithPopup","error","logoutUser","signOut","resetPassword","email","sendPasswordResetEmail"],"mappings":"meAgC0B,CACxB,MAMMA,EANkB,CACtB,wBACA,4BACA,4BAGkCC,OAAOC,IAAYC,EAAgBD,IACvE,GAAIF,EAAYI,OAAS,EACvB,MAAM,IAAIC,MAAM,2CAA2CL,EAAYM,KAAK,QAEhF,CAGA,MAAMC,EAAMC,EAzBW,CACrBC,OAAQ,mCACRC,WAAY,+BACZC,UAAW,kBACXC,cAA+D,qCAC/DC,kBAAwE,eACxEC,MAA+C,4CAC/CC,cAA+D,iBAmBpDC,EAAOC,EAAQV,GACVW,EAAaX,GAK/B,MAAMY,EAAiB,IAAIC,EAC3BD,EAAeE,oBAAoB,CAAEC,OAAQ,mBAmDtC,MAAMC,EAAmBC,UAC9B,IACE,aAAaC,EAAgBT,EAAMG,EACrC,OAASO,GAEP,MAAMA,CACR,GAOWC,EAAaH,UACxB,UACQI,EAAQZ,EAChB,OAASU,GAEP,MAAMA,CACR,GAQWG,EAAgBL,MAAOM,IAClC,UACQC,EAAuBf,EAAMc,EACrC,OAASJ,GAEP,MAAMA,CACR"}