{"version":3,"file":"ForgotPassword-DYTM9HXl.js","sources":["../../src/pages/ForgotPassword.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuthStore } from \"@/stores/authStore\";\nimport { resetPassword } from \"@/lib/firebase\";\n\n// Skema validasi untuk form reset password\nconst forgotPasswordSchema = z.object({\n  email: z.string().email({\n    message: \"Email tidak valid\",\n  }),\n});\n\ntype ForgotPasswordFormValues = z.infer<typeof forgotPasswordSchema>;\n\nconst ForgotPassword = () => {\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const { isAuthenticated } = useAuthStore();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState(false);\n\n  // Redirect to dashboard if user is already logged in\n  useEffect(() => {\n    if (isAuthenticated) {\n      navigate('/dashboard');\n    }\n  }, [isAuthenticated, navigate]);\n\n  // Inisialisasi form dengan react-hook-form dan zod validator\n  const form = useForm<ForgotPasswordFormValues>({\n    resolver: zodResolver(forgotPasswordSchema),\n    defaultValues: {\n      email: \"\",\n    },\n  });\n\n  // Handler untuk reset password\n  const onSubmit = async (data: ForgotPasswordFormValues) => {\n    setIsLoading(true);\n    setError(null);\n    setSuccess(false);\n\n    try {\n      await resetPassword(data.email);\n      setSuccess(true);\n      toast({\n        title: \"Email terkirim\",\n        description: \"Silakan periksa email Anda untuk instruksi reset password\",\n      });\n    } catch (error: any) {\n      console.error(\"Password reset error:\", error);\n      // Menangani berbagai jenis error dari Firebase\n      if (error.code === \"auth/user-not-found\") {\n        setError(\"Email tidak terdaftar\");\n      } else if (error.code === \"auth/invalid-email\") {\n        setError(\"Format email tidak valid\");\n      } else if (error.code === \"auth/too-many-requests\") {\n        setError(\"Terlalu banyak permintaan. Silakan coba lagi nanti\");\n      } else {\n        setError(\"Terjadi kesalahan saat mengirim email reset. Silakan coba lagi\");\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/5 via-background to-accent/5 p-4\">\n      <Card className=\"w-full max-w-md shadow-lg\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center\">Lupa Password</CardTitle>\n          <CardDescription className=\"text-center\">\n            Masukkan email Anda untuk menerima instruksi reset password\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {error && (\n            <Alert variant=\"destructive\" className=\"mb-4\">\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          {success && (\n            <Alert className=\"mb-4 bg-green-50 text-green-800 border-green-200\">\n              <AlertDescription>\n                Email reset password telah dikirim. Silakan periksa kotak masuk atau folder spam Anda.\n              </AlertDescription>\n            </Alert>\n          )}\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"nama@email.com\" \n                        type=\"email\" \n                        disabled={isLoading} \n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                {isLoading ? \"Memproses...\" : \"Kirim Instruksi Reset\"}\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n        <CardFooter>\n          <div className=\"text-center text-sm w-full space-y-2\">\n            <div>\n              <Link to=\"/login\" className=\"text-primary hover:underline\">\n                Kembali ke halaman login\n              </Link>\n            </div>\n            <div>\n              Belum punya akun?{\" \"}\n              <Link to=\"/register\" className=\"text-primary hover:underline\">\n                Daftar sekarang\n              </Link>\n            </div>\n          </div>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n};\n\nexport default ForgotPassword;"],"names":["forgotPasswordSchema","z.object","email","z.string","message","ForgotPassword","navigate","useNavigate","toast","useToast","isAuthenticated","useAuthStore","isLoading","setIsLoading","useState","error","setError","success","setSuccess","useEffect","form","useForm","resolver","zodResolver","defaultValues","className","children","jsxs","Card","CardHeader","jsx","CardTitle","CardDescription","CardContent","Alert","variant","AlertDescription","Form","onSubmit","handleSubmit","async","data","resetPassword","title","description","code","FormField","control","name","render","field","FormItem","FormLabel","FormControl","Input","placeholder","type","disabled","FormMessage","Button","CardFooter","Link","to"],"mappings":"whBAeA,MAAMA,EAAuBC,EAAS,CACpCC,MAAOC,IAAWD,MAAM,CACtBE,QAAS,wBAMPC,EAAiB,KACrB,MAAMC,EAAWC,KACXC,MAAEA,GAAUC,KACZC,gBAAEA,GAAoBC,KACrBC,EAAWC,GAAgBC,EAAAA,UAAS,IACpCC,EAAOC,GAAYF,EAAAA,SAAwB,OAC3CG,EAASC,GAAcJ,EAAAA,UAAS,GAGvCK,EAAAA,UAAU,KACJT,GACFJ,EAAS,eAEV,CAACI,EAAiBJ,IAGrB,MAAMc,EAAOC,EAAkC,CAC7CC,SAAUC,EAAYvB,GACtBwB,cAAe,CACbtB,MAAO,MAkCX,aACG,MAAA,CAAIuB,UAAU,gHACbC,SAAAC,EAAAA,KAACC,EAAA,CAAKH,UAAU,4BACdC,SAAA,GAAAC,KAACE,EAAA,CAAWJ,UAAU,YACpBC,SAAA,CAAAI,EAAAA,IAACC,EAAA,CAAUN,UAAU,iCAAiCC,SAAA,kBACtDI,EAAAA,IAACE,EAAA,CAAgBP,UAAU,cAAcC,SAAA,0EAI1CO,EAAA,CACEP,SAAA,CAAAX,GACCe,EAAAA,IAACI,GAAMC,QAAQ,cAAcV,UAAU,OACrCC,SAAAI,EAAAA,IAACM,EAAA,CAAkBV,SAAAX,MAItBE,SACEiB,EAAA,CAAMT,UAAU,mDACfC,SAAAI,EAAAA,IAACM,EAAA,CAAiBV,wGAMtBI,IAACO,EAAA,IAASjB,EACRM,SAAAC,EAAAA,KAAC,OAAA,CAAKW,SAAUlB,EAAKmB,aAtDdC,MAAOC,IACtB5B,GAAa,GACbG,EAAS,MACTE,GAAW,GAEX,UACQwB,EAAcD,EAAKvC,OACzBgB,GAAW,GACXV,EAAM,CACJmC,MAAO,iBACPC,YAAa,6DAEjB,OAAS7B,GAGY,wBAAfA,EAAM8B,KACR7B,EAAS,yBACe,uBAAfD,EAAM8B,KACf7B,EAAS,4BACe,2BAAfD,EAAM8B,KACf7B,EAAS,sDAETA,EAAS,iEAEb,CAAA,QACEH,GAAa,EACf,IA4BqDY,UAAU,YACrDC,SAAA,CAAAI,EAAAA,IAACgB,EAAA,CACCC,QAAS3B,EAAK2B,QACdC,KAAK,QACLC,OAAQ,EAAGC,kBACRC,EAAA,CACCzB,SAAA,GAAAI,IAACsB,GAAU1B,SAAA,gBACV2B,EAAA,CACC3B,SAAAI,EAAAA,IAACwB,EAAA,CACCC,YAAY,iBACZC,KAAK,QACLC,SAAU7C,KACNsC,YAGPQ,EAAA,CAAA,QAKP5B,EAAAA,IAAC6B,EAAA,CAAOH,KAAK,SAAS/B,UAAU,SAASgC,SAAU7C,EAChDc,SAAAd,EAAY,eAAiB,kCAKtCkB,MAAC8B,EAAA,CACClC,SAAAC,EAAAA,KAAC,MAAA,CAAIF,UAAU,uCACbC,SAAA,GAAAI,IAAC,MAAA,CACCJ,eAACmC,EAAA,CAAKC,GAAG,SAASrC,UAAU,+BAA+BC,+CAI5D,MAAA,CAAIA,SAAA,CAAA,oBACe,UACjBmC,EAAA,CAAKC,GAAG,YAAYrC,UAAU,+BAA+BC,SAAA"}